# read nodes
- hosts: local
  become: true
  become_user: "{{ act_as }}"

  vars:
    node_group: "consul"
    node_read_only: true

  vars_files:
    - vars/variables.prod.yml

  roles:
    - vagrant-newnode

- hosts: local
  become: true
  become_user: "{{ act_as }}"

  vars:
    node_group: "vault"
    node_read_only: true

  vars_files:
    - vars/variables.prod.yml

  roles:
    - vagrant-newnode

- hosts: vagrant_consul
  become: true

  vars:
    ansible_host_key_checking: false

  tasks:
    - name: Put Consul ACL block
      blockinfile:
        path: /etc/consul.d/consul.hcl
        insertafter:
        block: |2

          acl {
            enabled = true
            default_policy = "allow"
            enable_token_persistence = true
          }

    - name: Remove block marker
      lineinfile:
        path: /etc/consul.d/consul.hcl
        state: absent
        regexp: ^# .* MANAGED BLOCK$

    - name: Restart consul service
      systemd:
        state: restarted
        name: consul

    - name: Set whos the first host
      set_fact:
        first_host: "{{ ansible_play_hosts|first }}"

    - name: Bootstraping consul ACL
      shell: consul acl bootstrap | tee /home/vagrant/consul_acl.txt
      register: consul_acl
      when: ansible_hostname == first_host

    - name: Save the global token
      set_fact:
        consul_token: "{{ hostvars[first_host].consul_acl.stdout_lines[1]|split(' ')|last }}"

    - name: Gathering data centers of each consul clients
      shell: consul members | grep {{ item }} | awk '{print $7}'
      register: consul_dcs
      when: ansible_hostname == first_host
      loop: "{{ groups['vagrant_vault'] }}"

    - name: Create consul agent token for each consul clients
      shell: |
        consul acl token create \
          -description "{{ item }} - agent token" \
          -node-identity "{{ item }}:{{ consul_dcs.results[item_idx].stdout }}"
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      register: raw_agent_tokens
      when: ansible_hostname == first_host
      loop: "{{ groups['vagrant_vault'] }}"
      loop_control:
        index_var: item_idx

    - name: Create consul DNS request policy
      shell: |
        consul acl policy create -name "dns-requests" -rules - <<EOF
        node_prefix "" {
          policy = "read"
        }
        
        service_prefix "" {
          policy = "read"
        }
        EOF
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      when: ansible_hostname == first_host

    - name: Create consul kv-vault-server policy
      shell: |
        consul acl policy create -name "kv-vault-server" -rules - <<EOF
        key_prefix "vault/" {
          policy = "write"
        }
        EOF
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      when: ansible_hostname == first_host

    - name: Create consul vault-server role
      shell: |
        consul acl role create \
          -name "vault-server" \
          -description "role for vault server" \
          -policy-name dns-requests \
          -policy-name kv-vault-server
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      when: ansible_hostname == first_host

    - name: Create vault server token policy for each consul clients
      shell: |
        consul acl token create \
          -description "{{ item }} - vault server token" \
          -role-name vault-server \
          -node-identity "{{ item }}:{{ consul_dcs.results[item_idx].stdout }}"
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      register: raw_vault_server_tokens
      when: ansible_hostname == first_host
      loop: "{{ groups['vagrant_vault'] }}"
      loop_control:
        index_var: item_idx

    - name: Create vault service token for each consul clients
      shell: |
        consul acl token create \
          -description "vault service token" \
          -role-name vault-server \
          -service-identity "vault:dc1"
      environment:
        CONSUL_HTTP_TOKEN: "{{ consul_token }}"
      register: raw_vault_service_token
      when: ansible_hostname == first_host

    - name: Save the agent tokens
      set_fact:
        vault_service_token: "{{ raw_vault_service_token.stdout_lines[1]|split(' ')|last }}"
        raw_tokens:
          agents: "{{ raw_agent_tokens.results }}"
          vault_servers: "{{ raw_vault_server_tokens.results }}"
      when: ansible_hostname == first_host

- hosts: vagrant_vault
  become: true
  serial: true

  vars:
    ansible_host_key_checking: false

  tasks:
    - set_fact: raw_tokens="{{ hostvars[groups['vagrant_consul']|first].raw_tokens }}"
    - set_fact: agent_index="{{ lookup('ansible.utils.index_of', raw_tokens.agents, 'eq', ansible_hostname, 'item') }}"
    - set_fact: agent_token="{{ raw_tokens.agents[agent_index|int].stdout_lines[1]|split(' ')|last }}"
    - set_fact: vault_server_index="{{ lookup('ansible.utils.index_of', raw_tokens.vault_servers, 'eq', ansible_hostname, 'item') }}"
    - set_fact: vault_server_token="{{ raw_tokens.vault_servers[vault_server_index|int].stdout_lines[1]|split(' ')|last }}"

    - name: Put ACL block
      blockinfile:
        path: /etc/consul.d/consul.hcl
        insertafter:
        block: |2

          acl {
            tokens {
              agent = "{{ agent_token }}"
              default = "{{ vault_server_token }}"
            }
          }

    - name: Remove block marker
      lineinfile:
        path: /etc/consul.d/consul.hcl
        state: absent
        regexp: ^# .* MANAGED BLOCK$

    - name: Restart consul service
      systemd:
        state: restarted
        name: consul

    - set_fact: vault_service_token="{{ hostvars[groups['vagrant_consul']|first].vault_service_token }}"

    - name: Remove existing vault service token
      lineinfile:
        path: /etc/vault.d/vault.hcl
        regexp: '  token = ".*"'
        state: absent

    - name: Put vault service token to vault conf
      lineinfile:
        path: /etc/vault.d/vault.hcl
        insertafter: "^storage\\s*\"consul\""
        line: '  token = "{{ vault_service_token }}"'

    - name: Restart vault service
      systemd:
        state: restarted
        name: vault

    - name: Check is vault service properly registered to consul
      shell: consul catalog services | grep vault

- hosts: vagrant_consul
  become: true

  vars:
    ansible_host_key_checking: false

  tasks:
    - name: Set default policy to deny
      lineinfile:
        path: /etc/consul.d/consul.hcl
        regexp: '  default_policy = "allow"'
        line: '  default_policy = "deny"'

    - name: Restart consul service
      systemd:
        state: restarted
        name: consul
